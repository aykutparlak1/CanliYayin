@model List<Chanels>
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>m3u8 Video Oynatıcı</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: black;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <div>

    </div>
    <video id="video" controls muted></video>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script>
        const video = document.getElementById('video');
        let currentIndex = 0;
        let videos = [];

        async function fetchVideos() {
            try {
                const response = await fetch('/Home/GetVideos');
                videos = await response.json();
                console.log(videos);
            } catch (error) {
                console.error('Error fetching videos:', error);
            }
        }

        function enterFullscreen() {
            if (video.requestFullscreen) {
                video.requestFullscreen();
            } else if (video.mozRequestFullScreen) {
                video.mozRequestFullScreen();
            } else if (video.webkitRequestFullscreen) {
                video.webkitRequestFullscreen();
            } else if (video.msRequestFullscreen) {
                video.msRequestFullscreen();
            }
        }

        var hls = new Hls();
        function playVideo() {
            video.muted = false;
            video.play();
            enterFullscreen();
        }

        function changeVideo(index) {
            let stt = videos[index];
            if (stt.linkUrl.endsWith('.m3u8')) {
                if (Hls.isSupported()) {
                    if (hls) {
                        hls.destroy();
                    }
                    hls = new Hls();
                    hls.loadSource(stt.linkUrl);
                    hls.attachMedia(video);
                } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                    video.src = stt.linkUrl;
                }
            } else {
                video.src = stt.linkUrl;
            }
            playVideo();
        }

        document.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                playVideo();
            }
        });

        document.getElementById('video').addEventListener('ended', function () {
            if (currentIndex < videos.length - 1) {
                currentIndex++;
                changeVideo(currentIndex);
            } else if (currentIndex >= videos.length - 1) {
                currentIndex = 0;
                changeVideo(currentIndex);
            }
        });

        document.addEventListener('keydown', async function (event) {
            if (event.key === '8' || event.key === '2') {
                await fetchVideos();
                if (event.key === '8') {
                    if (currentIndex < videos.length - 1) {
                        currentIndex++;
                    } else {
                        currentIndex = 0;
                    }
                } else if (event.key === '2') {
                    if (currentIndex > 0) {
                        currentIndex--;
                    } else {
                        currentIndex = videos.length - 1;
                    }
                }
                changeVideo(currentIndex);
            }
        });

        // İlk yüklemede videoları çek
        fetchVideos().then(() => {
            changeVideo(currentIndex);
        });
    </script>
</body>
</html>